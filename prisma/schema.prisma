generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stripe_customer_id       String?
  stripe_subscription_item String?
  posts       Post[]
  comments    Comment[]
  likes       Like[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean    @default(false)
  premium     Boolean   @default(false)
  userId      String
  user        User       @relation(fields: [userId], references: [email])
  categoryId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category?  @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  

}

model Category {
  id        String    @id @default(cuid())
  name      String
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([name])

}

model Comment {
  id        String  @id @default(cuid())
  content   String
  postId    String
  post      Post    @relation(fields: [postId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Like {
  id      String  @id @default(cuid())
  postId  String
  post    Post    @relation(fields: [postId], references: [id])
  userId  String
  user      User    @relation(fields: [userId], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Tag {
  id        String  @id @default(cuid())
  name      String  @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
